/*
 * # Semantic - Grid
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributor
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

/*** Theme ***/

$type    : 'collection';
$element : 'grid';
$import '../../theme.config';

/*** Standard ****/

.ui.grid {
  display: block;
  text-align: left;
  font-size: 0em;
  padding: 0em;
  &:after, > .row:after {
    content: '';
    display: block;
    height: 0px;
    clear: both;
    visibility: hidden;
  }
}

/*- Remove Gutters -*/

.ui.grid {
  margin: {
    top: -($rowSpacing / 2);
    bottom: -($rowSpacing / 2);
    left: -($gutterWidth / 2);
    right: -($gutterWidth / 2);
  }
}
.ui.relaxed.grid  {
  margin-left: -($relaxedGutterWidth / 2);
  margin-right: -($relaxedGutterWidth / 2);
}
.ui[class*="very relaxed"].grid  {
  margin-left: -($veryRelaxedGutterWidth / 2);
  margin-right: -($veryRelaxedGutterWidth / 2);
}

/* Collapse Margins on Consecutive Grids */
.ui.grid + .grid { margin-top: ($rowSpacing / 2); }

/*- Columns -*/

/* Standard 16 column */
.ui.grid {
  > .column:not(.row), > .row > .column {
    display: inline-block;
    text-align: left;
    font-size: 1rem;
    width: $oneWide;
    padding-left: ($gutterWidth / 2);
    padding-right: ($gutterWidth / 2);
    vertical-align: top;
  > * {
    padding-left: ($gutterWidth / 2);
    padding-right: ($gutterWidth / 2);
  }
}

/*- Rows -*/

.ui.grid > .row {
  display: block;
  width: auto !important;
  padding: 0rem;
  font-size: 0rem;
  padding-top: ($rowSpacing / 2);
  padding-bottom: ($rowSpacing / 2);
}

/*- Columns -*/

/* Vertical padding when no rows */
.ui.grid {
  > .column:not(.row) {
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .row > .column {
    margin-top: 0em;
    margin-bottom: 0em;
  }
}

/*- Content -*/

.ui.grid > .row {
  > img, > .column > img { max-width: $columnMaxImageWidth; }
}

/*- Loose Coupling -*/

.ui.grid .row + .ui.divider { margin: ($rowSpacing / 2) ($gutterWidth / 2); }

/* remove Border on last horizontal segment */
.ui.grid {
  > .row > .column:last-child > .horizontal.segment,
  > .column:last-child > .horizontal.segment { box-shadow: none; }
}

/*** Variations ***/


/*- Page Grid -*/

.ui.page.grid {
  padding-left: $computerGutter;
  padding-right: $computerGutter;
  width: $computerWidth;
}

/* Collapse Margin */
.ui.grid > .ui.grid{
  &:first-child { margin-top: 0em; }
  &:last-child { margin-bottom: 0em; }
}

@media only screen and (max-width: ($largestMobileScreen)) {
  .ui.page.grid {
    width: $mobileWidth;
    padding-left: $mobileGutter;
    padding-right: $mobileGutter;
    margin: 0em;
  }
}
@media only screen and (min-width: $tabletBreakpoint) {
  .ui.page.grid {
    width: $tabletWidth;
    margin-left: $tabletMargin;
    margin-right: $tabletMargin;
    padding-left: $tabletGutter;
    padding-right: $tabletGutter;
  }
}
@media only screen and (min-width: $computerBreakpoint) {
  .ui.page.grid {
    width: $computerWidth;
    margin-left: $computerMargin;
    margin-right: $computerMargin;
    padding-left: $computerGutter;
    padding-right: $computerGutter;
  }
}
@media only screen and (min-width: $largeMonitorBreakpoint) {
  .ui.page.grid {
    width: $largeMonitorWidth;
    margin-left: $largeMonitorMargin;
    margin-right: $largeMonitorMargin;
    padding-left: $largeMonitorGutter;
    padding-right: $largeMonitorGutter;
  }
}
@media only screen and (min-width: $widescreenMonitorBreakpoint) {
  .ui.page.grid {
    width: $widescreenMonitorWidth;
    margin-left: $widescreenMargin;
    margin-right: $widescreenMargin;
    padding-left: $widescreenMonitorGutter;
    padding-right: $widescreenMonitorGutter;
  }
}

/*- Column Count -*/

/* Assume full width with one column */
.ui.grid {
  > .column:only-child, > .row > .column:only-child { width: $oneColumn; }
}

/* Grid Based */

@each $number in one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen {
  .ui[class*="#{$number} column"].grid {
    > .row > .column, > .column  {width: str-insert($number, "$", 1) + "Column"; }
  }
}

/* Row Based Overrides */

@each $number in one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen {
  .ui.grid {
    > [class*="#{$number} column"].row > .column {width: str-insert($number, "$", 1) + "Column !important"; }
  }
}

/*- Column Width -*/

/* Sizing Combinations */

@each $number in one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen {
  .ui.grid > .row > [class*="#{$number} wide"].column,
  .ui.grid > .column.row > [class*="#{$number} wide"].column,
  .ui.grid > [class*="#{$number} wide"].column,
  .ui.column.grid > [class*="#{$number} wide"].column { width: str-insert($number, "$", 1) + "Wide !important"; }
}

/*- Centered -*/

.ui.centered.grid,
.ui.centered.grid > .row,
.ui.grid .centered.row { text-align: center; }

.ui.centered.grid > .column:not(.aligned),
.ui.centered.grid > .row > .column:not(.aligned),
.ui.grid .centered.row > .column:not(.aligned) { text-align: left; }

.ui.grid > .centered.column,
.ui.grid > .row > .centered.column {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/*- Relaxed -*/

.ui.relaxed.grid > .column:not(.row),
.ui.relaxed.grid > .row > .column,
.ui.grid > .relaxed.row > .column {
  padding-left: ($relaxedGutterWidth / 2);
  padding-right: ($relaxedGutterWidth / 2);
}

.ui[class*="very relaxed"].grid > .column:not(.row),
.ui[class*="very relaxed"].grid > .row > .column,
.ui.grid > [class*="very relaxed"].row > .column {
  padding-left: ($veryRelaxedGutterWidth / 2);
  padding-right: ($veryRelaxedGutterWidth / 2);
}

/* Coupling with UI Divider */
.ui.relaxed.grid .row + .ui.divider,
.ui.grid .relaxed.row + .ui.divider {
  margin-left: ($relaxedGutterWidth / 2);
  margin-right: ($relaxedGutterWidth / 2);
}
.ui[class*="very relaxed"].grid .row + .ui.divider,
.ui.grid [class*="very relaxed"].row + .ui.divider {
  margin-left: ($veryRelaxedGutterWidth / 2);
  margin-right: ($veryRelaxedGutterWidth / 2);
}


/*- Padded -*/

.ui.padded.grid:not(.vertically):not(.horizontally) { margin: 0em !important; }
[class*="horizontally padded"].ui.grid {
  margin-left: 0em !important;
  margin-right: 0em !important;
}
[class*="vertically padded"].ui.grid {
  margin-top: 0em !important;
  margin-bottom: 0em !important;
}

/*- "Floated" -*/

.ui.grid [class*="left floated"].column { float: left; }
.ui.grid [class*="right floated"].column { float: right; }

/*- Divided -*/

.ui.divided.grid:not([class*="vertically divided"]) > .column:not(.row),
.ui.divided.grid:not([class*="vertically divided"]) > .row > .column { box-shadow: $dividedBorder; }

/* Swap from padding to margin on columns to have dividers align */
.ui[class*="vertically divided"]{
  &.grid > .column:not(.row),
  &.grid > .row > .column {
    margin-top: ($rowSpacing / 2);
    margin-bottom: ($rowSpacing / 2);
    padding-top: 0rem;
    padding-bottom: 0rem;
  }
  &.grid > .row {
    margin-top: 0em;
    margin-bottom: 0em;
    padding-top: 0em;
    padding-bottom: 0em;
  }
}
/* No divider on first column on row */
.ui.divided.grid:not([class*="vertically divided"]) > .column:first-child,
.ui.divided.grid:not([class*="vertically divided"]) > .row > .column:first-child { box-shadow: none; }

/* Divided Row */
.ui.grid > .divided.row > .column { box-shadow: $dividedBorder; }
.ui.grid > .divided.row > .column:first-child { box-shadow: none; }

/* Vertically Divided */
.ui[class*="vertically divided"].grid > .row { position: relative; }
.ui[class*="vertically divided"].grid > .row:before {
  position: absolute;
  content: "";
  top: 0em;
  left: 0px;
  width: #{calc(100% - }$gutterWidth#{)};
  height: 1px;
  margin: 0% ($gutterWidth / 2);
  box-shadow: $verticallyDividedBorder;
}

/* Padded Horizontally Divided */
[class*="horizontally padded"].ui.divided.grid,
.ui.padded.divided.grid:not(.vertically):not(.horizontally) { width: 100%; }

/* First Row Vertically Divided */
.ui[class*="vertically divided"].grid > .row:first-child:before { box-shadow: none; }

/* Inverted Divided */
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .column,
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .row > .column {
  box-shadow: $dividedInvertedBorder;
}
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .column:first-child,
.ui.inverted.divided.grid:not([class*="vertically divided"]) > .row > .column:first-child {
  box-shadow: none;
}
.ui.inverted[class*="vertically divided"].grid > .row {
  box-shadow: $verticallyDividedInvertedBorder;
}

/* Relaxed */
.ui.relaxed[class*="vertically divided"].grid > .row:before {
  margin-left: ($relaxedGutterWidth / 2);
  margin-right: ($relaxedGutterWidth / 2);
  width: #{calc(100% - }$relaxedGutterWidth#{)};
}
.ui[class*="very relaxed"][class*="vertically divided"].grid > .row:before {
  margin-left: $veryRelaxedGutterWidth;
  margin-right: $veryRelaxedGutterWidth;
  width: #{calc(100% - }$veryRelaxedGutterWidth#{)};
}

/*- Celled -*/

.ui.celled.grid {
  display: table;
  table-layout: fixed;
  width: 100%;
  margin: $celledMargin;
  box-shadow: 0px 0px 0px $celledWidth $celledBorderColor;
  > .row,
  > .column.row, > .column.row:first-child {
    display: table;
    table-layout: fixed;
    width: 100% !important;
    margin: 0em;
    padding: 0em;
    box-shadow: 0px (-$celledWidth) 0px 0px $celledBorderColor;
  }
  > .column:not(.row), > .row > .column {
    display: table-cell;
    box-shadow: (-$celledWidth) 0px 0px 0px $celledBorderColor;
  }
  > .column:first-child, > .row > .column:first-child { box-shadow: none; }
}

.ui.celled.page.grid { box-shadow: none; }

.ui.celled.grid > .column:not(.row),
.ui.celled.grid > .row > .column { padding: $celledPadding; }

.ui.relaxed.celled.grid > .column:not(.row),
.ui.relaxed.celled.grid > .row > .column { padding: $celledRelaxedPadding; }

.ui[class*="very relaxed"].celled.grid > .column:not(.row),
.ui[class*="very relaxed"].celled.grid > .row > .column { padding: $celledVeryRelaxedPadding; }

/* Internally Celled */
.ui[class*="internally celled"].grid {
  box-shadow: none;
  > .row:first-child { box-shadow: none; }
  > .row > .column:first-child { box-shadow: none; }
}

/*- Horizontally Centered -*/

/* Left Aligned */
.ui[class*="left aligned"].grid,
.ui[class*="left aligned"].grid > .row > .column,
.ui[class*="left aligned"].grid > .column,
.ui.grid [class*="left aligned"].column,
.ui.grid > [class*="left aligned"].aligned.row > .column { text-align: left; }

.ui.grid [class*="left aligned"].column{ text-align: left !important; }

/* Center Aligned */
.ui[class*="center aligned"].grid,
.ui[class*="center aligned"].grid > .row > .column,
.ui[class*="center aligned"].grid > .column,
.ui.grid > [class*="center aligned"].aligned.row > .column { text-align: center; }

.ui.grid [class*="center aligned"].column{ text-align: center !important; }

/* Right Aligned */
.ui[class*="right aligned"].grid,
.ui[class*="right aligned"].grid > .row > .column,
.ui[class*="right aligned"].grid > .column,
.ui.grid > [class*="right aligned"].aligned.row > .column { text-align: right; }

.ui.grid [class*="right aligned"].column { text-align: right !important; }

/* Justified */
.ui.justified.grid,
.ui.justified.grid > .row > .column,
.ui.justified.grid > .column,
.ui.grid .justified.column,
.ui.grid > .justified.row > .column {
  text-align: justify;
  hyphens: auto;
}
.ui.grid .justified.column {
  text-align: justify !important;
  hyphens: auto !important;
}

/*- Vertically Aligned -*/

/* Top Aligned */
.ui[class*="top aligned"].grid,
.ui[class*="top aligned"].grid > .row > .column,
.ui[class*="top aligned"].grid > .column,
.ui.grid [class*="top aligned"].column,
.ui.grid > [class*="top aligned"].aligned.row > .column { vertical-align: top; }

.ui.grid [class*="top aligned"].column{ vertical-align: top !important; }

/* Middle Aligned */
.ui[class*="center aligned"].grid,
.ui[class*="middle aligned"].grid > .row > .column,
.ui[class*="middle aligned"].grid > .column,
.ui.grid > [class*="middle aligned"].aligned.row > .column { vertical-align: middle; }

.ui.grid [class*="middle aligned"].column { vertical-align: middle !important; }

/* Bottom Aligned */
.ui[class*="bottom aligned"].grid,
.ui[class*="bottom aligned"].grid > .row > .column,
.ui[class*="bottom aligned"].grid > .column,
.ui.grid > [class*="bottom aligned"].aligned.row > .column { vertical-align: bottom; }

.ui.grid [class*="bottom aligned"].column{ vertical-align: bottom !important; }

/*- Colored -*/

.ui.grid {
  > .white.row, .white.column {
    background-color: $white !important;
    color: $textColor;
  }
  > .row > .white.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .black.row, .black.column {
    background-color: $black !important;
    color: $white;
  }
  > .row > .black.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .blue.row, .blue.column {
    background-color: $blue !important;
    color: $white;
  }
  > .row > .blue.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .green.row, .green.column {
    background-color: $green !important;
    color: $white;
  }
  > .row > .green.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .orange.row, .orange.column {
    background-color: $orange !important;
    color: $white;
  }
  > .row > .orange.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .pink.row, .pink.column {
    background-color: $pink !important;
    color: $white;
  }
  > .row > .pink.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .purple.row, .purple.column {
    background-color: $purple !important;
    color: $white;
  }
  > .row > .purple.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .red.row, .red.column {
    background-color: $red !important;
    color: $white;
  }
  > .row > .red.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .teal.row, .teal.column {
    background-color: $teal !important;
    color: $white;
  }
  > .row > .teal.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
  > .yellow.row, .yellow.column {
    background-color: $yellow !important;
    color: $white;
  }
  > .row > .yellow.column {
    margin-top: -($rowSpacing / 2);
    margin-bottom: -($rowSpacing / 2);
    padding-top: ($rowSpacing / 2);
    padding-bottom: ($rowSpacing / 2);
  }
}

/*- Equal Height Columns -*/
.ui[class*="equal height"].grid {
  display: table;
  table-layout: fixed;
  width: $tableWidth;
}
.ui[class*="equal height"].relaxed.grid { width: $relaxedTableWidth; }
.ui[class*="equal height"][class*="very relaxed"].grid { width: $veryRelaxedTableWidth; }

.ui[class*="equal height"].grid > .row,
.ui[class*="equal height"].row  {
  display: table;
  table-layout: fixed;
  width: 100% !important;
}
.ui[class*="equal height"].grid > .column,
.ui[class*="equal height"].grid > .row > .column,
.ui.grid > [class*="equal height"].row > .column { display: table-cell; }

/*- Doubling -*/

/* Tablet Only */
@media only screen and (min-width: $tabletBreakpoint) and (max-width: $largestTabletScreen) {
  .ui.doubling.grid { width: 100% !important; }
  .ui.grid > .doubling.row,
  .ui.doubling.grid > .row {
    margin: 0em !important;
    padding: 0em !important;
  }
  .ui.grid > .doubling.row > .column,
  .ui.doubling.grid > .row > .column {
    display: inline-block !important;
    padding-top: ($rowSpacing / 2) !important;
    padding-bottom: ($rowSpacing / 2) !important;
    margin: 0em;
  }
  .ui[class*="two column"].doubling.grid > .row > .column,
  .ui[class*="two column"].doubling.grid > .column,
  .ui.grid > [class*="two column"].doubling.row > .column { width: $oneColumn !important; }
  .ui[class*="three column"].doubling.grid > .row > .column,
  .ui[class*="three column"].doubling.grid > .column,
  .ui.grid > [class*="three column"].doubling.row > .column { width: $twoColumn !important; }
  .ui[class*="four column"].doubling.grid > .row > .column,
  .ui[class*="four column"].doubling.grid > .column,
  .ui.grid > [class*="four column"].doubling.row > .column { width: $twoColumn !important; }
  .ui[class*="five column"].doubling.grid > .row > .column,
  .ui[class*="five column"].doubling.grid > .column,
  .ui.grid > [class*="five column"].doubling.row > .column { width: $threeColumn !important; }
  .ui[class*="six column"].doubling.grid > .row > .column,
  .ui[class*="six column"].doubling.grid > .column,
  .ui.grid > [class*="six column"].doubling.row > .column { width: $threeColumn !important; }
  .ui[class*="eight column"].doubling.grid > .row > .column,
  .ui[class*="eight column"].doubling.grid > .column,
  .ui.grid > [class*="eight column"].doubling.row > .column { width: $threeColumn !important; }
  .ui[class*="eight column"].doubling.grid > .row > .column,
  .ui[class*="eight column"].doubling.grid > .column,
  .ui.grid > [class*="eight column"].doubling.row > .column { width: $fourColumn !important; }
  .ui[class*="nine column"].doubling.grid > .row > .column,
  .ui[class*="nine column"].doubling.grid > .column,
  .ui.grid > [class*="nine column"].doubling.row > .column { width: $fourColumn !important; }
  .ui[class*="ten column"].doubling.grid > .row > .column,
  .ui[class*="ten column"].doubling.grid > .column,
  .ui.grid > [class*="ten column"].doubling.row > .column { width: $fiveColumn !important; }
  .ui[class*="twelve column"].doubling.grid > .row > .column,
  .ui[class*="twelve column"].doubling.grid > .column,
  .ui.grid > [class*="twelve column"].doubling.row > .column { width: $sixColumn !important; }
  .ui[class*="fourteen column"].doubling.grid > .row > .column,
  .ui[class*="fourteen column"].doubling.grid > .column,
  .ui.grid > [class*="fourteen column"].doubling.row > .column { width: $sevenColumn !important; }
  .ui[class*="sixteen column"].doubling.grid > .row > .column,
  .ui[class*="sixteen column"].doubling.grid > .column,
  .ui.grid > [class*="sixteen column"].doubling.row > .column { width: $eightColumn !important; }
}

/* Mobily Only */
@media only screen and (max-width: $largestMobileScreen) {
  .ui.doubling.grid { width: 100% !important; }
  .ui.grid > .doubling.row,
  .ui.doubling.grid > .row {
    display: block !important;
    margin: 0em !important;
    padding: 0em !important;
  }
  .ui.grid > .doubling.row > .column,
  .ui.doubling.grid > .row > .column {
    display: inline-block !important;
    padding-top: ($rowSpacing / 2) !important;
    padding-bottom: ($rowSpacing / 2) !important;
    margin: 0em !important;
  }
  .ui[class*="two column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="two column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="two column"].doubling:not(.stackable).row > .column { width: $oneColumn !important; }
  .ui[class*="three column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="three column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="three column"].doubling:not(.stackable).row > .column { width: $twoColumn !important; }
  .ui[class*="four column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="four column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="four column"].doubling:not(.stackable).row > .column { width: $twoColumn !important; }
  .ui[class*="five column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="five column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="five column"].doubling:not(.stackable).row > .column { width: $twoColumn !important; }
  .ui[class*="six column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="six column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="six column"].doubling:not(.stackable).row > .column { width: $twoColumn !important; }
  .ui[class*="seven column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="seven column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="seven column"].doubling:not(.stackable).row > .column { width: $twoColumn !important; }
  .ui[class*="eight column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="eight column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="eight column"].doubling:not(.stackable).row > .column { width: $twoColumn !important; }
  .ui[class*="nine column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="nine column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="nine column"].doubling:not(.stackable).row > .column { width: $threeColumn !important; }
  .ui[class*="ten column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="ten column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="ten column"].doubling:not(.stackable).row > .column { width: $threeColumn !important; }
  .ui[class*="twelve column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="twelve column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="twelve column"].doubling:not(.stackable).row > .column { width: $threeColumn !important; }
  .ui[class*="fourteen column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="fourteen column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="fourteen column"].doubling:not(.stackable).row > .column { width: $fourColumn !important; }
  .ui[class*="sixteen column"].doubling:not(.stackable).grid > .row > .column,
  .ui[class*="sixteen column"].doubling:not(.stackable).grid > .column,
  .ui.grid > [class*="sixteen column"].doubling:not(.stackable).row > .column { width: $fourColumn !important; }
}

/*- Stackable -*/

@media only screen and (max-width: $largestMobileScreen) {
  .ui.stackable.grid {
    display: block !important;
    width: auto;
    padding: 0em;
    margin-top: 0em;
    margin-bottom: 0em;
  }
  :not(.column) > .ui.stackable.grid { margin: 0em; }
  .ui.stackable.grid {
    > .row > .wide.column,
    > .wide.column,
    > .column.grid > .column,
    > .column.row > .column,
    > .row > .column,
    > .column {
      display: block !important;
      width: auto !important;
      margin: ($stackableRowSpacing / 4) 0em !important;
      padding: ($stackableRowSpacing / 4) ($stackableGutter / 2) 0em !important;
      box-shadow: none !important;
    }
  }
  .ui.stackable.celled.grid > .column,
  .ui.stackable.celled.grid > .row > .column,
  .ui.stackable.divided.grid > .column,
  .ui.stackable.divided.grid > .row > .column {
    border-top: $stackableMobileBorder;
    box-shadow: none !important;
    margin: ($stackableRowSpacing) 0em !important;
    padding: ($stackableRowSpacing) ($stackableGutter / 2) 0em !important;
  }
  .ui.inverted.stackable.celled.grid > .column,
  .ui.inverted.stackable.celled.grid > .row > .column,
  .ui.inverted.stackable.divided.grid > .column,
  .ui.inverted.stackable.divided.grid > .row > .column { border-top: $stackableInvertedMobileBorder; }
  .ui.stackable.grid > .row:first-child > .column:first-child,
  .ui.stackable.grid > .column:first-child {
    margin-top: 0em !important;
    padding-top: 0em !important;
  }
  .ui.stackable.divided.grid > .row:first-child > .column:first-child,
  .ui.stackable.celled.grid > .row:first-child > .column:first-child,
  .ui.stackable.divided.grid > .column:first-child,
  .ui.stackable.celled.grid > .column:first-child { border-top: none !important; }

  .ui[class*="equal height"].stackable.page.grid {
    display: block !important;
    width: 100% !important;
  }

  /* Remove pointers from vertical menus */
  .ui.stackable.grid .vertical.pointing.menu .item:after { display: none; }
}

/*- Only (Device) -*/


/* These include arbitrary class repetitions for forced specificity */

/* Mobile Only Hide */
@media only screen and ( max-width: $largestMobileScreen ) {
  .ui.tablet:not(.mobile).only.grid.grid.grid,
  .ui.grid.grid.grid > [class*="tablet only"].row:not(.mobile),
  .ui.grid.grid.grid > [class*="tablet only"].column:not(.mobile),
  .ui.grid.grid.grid > .row > [class*="tablet only"].column:not(.mobile) { display: none !important; }
  .ui[class*="computer only"].grid.grid.grid:not(.mobile),
  .ui.grid.grid.grid > [class*="computer only"].row:not(.mobile),
  .ui.grid.grid.grid > [class*="computer only"].column:not(.mobile),
  .ui.grid.grid.grid > .row > [class*="computer only"].column:not(.mobile) { display: none !important; }
}
/* Tablet Only Hide */
@media only screen and (min-width: $tabletBreakpoint ) and (max-width: $largestTabletScreen) {
  .ui[class*="mobile only"].grid.grid.grid:not(.tablet),
  .ui.grid.grid.grid > [class*="mobile only"].row:not(.tablet),
  .ui.grid.grid.grid > [class*="mobile only"].column:not(.tablet),
  .ui.grid.grid.grid > .row > [class*="mobile only"].column:not(.tablet) { display: none !important; }
  .ui[class*="computer only"].grid.grid.grid:not(.tablet),
  .ui.grid.grid.grid > [class*="computer only"].row:not(.tablet),
  .ui.grid.grid.grid > [class*="computer only"].column:not(.tablet),
  .ui.grid.grid.grid > .row > [class*="computer only"].column:not(.tablet) { display: none !important; }
}

/* Computer Only Hide */
@media only screen and ( min-width: ($computerBreakpoint) ) {
  .ui[class*="mobile only"].grid.grid.grid:not(.computer),
  .ui.grid.grid.grid > [class*="mobile only"].row:not(.computer),
  .ui.grid.grid.grid > [class*="mobile only"].column:not(.computer),
  .ui.grid.grid.grid > .row > [class*="mobile only"].column:not(.computer) { display: none !important; }
  .ui[class*="tablet only"].grid.grid.grid:not(.computer),
  .ui.grid.grid.grid > [class*="tablet only"].row:not(.computer),
  .ui.grid.grid.grid > [class*="tablet only"].column:not(.computer),
  .ui.grid.grid.grid > .row > [class*="tablet only"].column:not(.computer) { display: none !important; }
}

@extend .loadUIOverrides;